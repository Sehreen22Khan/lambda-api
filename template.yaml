AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Deploy a Flask-based API on Lambda behind API Gateway and CloudFront with a CI/CD pipeline
  that sources code from a GitHub repository.

Parameters:
  GitHubRepositoryOwner:
    Type: String
    Description: GitHub repository owner (e.g., my-github-username)
  GitHubRepositoryName:
    Type: String
    Description: GitHub repository name (e.g., lambda-api)
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to build from
  ApplicationName:
    Type: String
    Default: flask-lambda-api
    Description: Name of the Lambda and associated resources

Resources:

  ############################################
  # IAM Roles
  ############################################

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
      Path: "/"

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Path: "/"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: "/"

  ############################################
  # Artifacts (S3 Bucket)
  ############################################

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  ############################################
  # Lambda Function & API Gateway
  ############################################

  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: [LambdaExecutionRole]
    Properties:
      FunctionName: !Ref ApplicationName
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: wsgi_handler.lambda_handler
      Runtime: python3.9
      Code:
        S3Bucket: !Ref ArtifactBucket
        S3Key: latest_build.zip
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          FLASK_ENV: production

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${ApplicationName}-api"
      EndpointConfiguration:
        Types: ["REGIONAL"]

  ApiGatewayResourceProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"

  ApiGatewayMethodProxy:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceProxy
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
      MethodResponses:
        - StatusCode: 200

  ApiGatewayMethodRoot:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
      MethodResponses:
        - StatusCode: 200

  LambdaPermissionApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodProxy
      - ApiGatewayMethodRoot
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  ############################################
  # CloudFront Distribution
  ############################################

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: apiOrigin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: true
        DefaultRootObject: ""
        Origins:
          - DomainName: !Sub "${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            Id: apiOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  ############################################
  # CodeBuild Project
  ############################################

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ApplicationName}-build"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: PACKAGE_NAME
            Value: latest_build.zip
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10

  ############################################
  # CodePipeline
  ############################################

  CodePipelineRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${ApplicationName}-CodePipelinePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:BatchGetProjects
              - codebuild:ListBuildsForProject
              - s3:* # For artifact bucket
              - lambda:UpdateFunctionCode
              - cloudformation:CreateChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - codepipeline:*
      Roles:
        - !Ref CodePipelineServiceRole

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${ApplicationName}-pipeline"
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Ref GitHubRepositoryOwner
                Repo: !Ref GitHubRepositoryName
                Branch: !Ref GitHubBranch
                OAuthToken: !Sub "{{resolve:secretsmanager:github/personal-access-token:SecretString:github-token}}"
                PollForSourceChanges: "false"
              OutputArtifacts:
                - Name: SourceArtifact
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: !Sub "${ApplicationName}-changeset"
                StackName: !Ref "AWS::StackName"
                TemplatePath: BuildArtifact::template.yml
                Capabilities: CAPABILITY_IAM
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Sub "${ApplicationName}-changeset"
                StackName: !Ref "AWS::StackName"
              RunOrder: 2

Outputs:
  ApiUrl:
    Description: "The API Gateway invoke URL"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  CloudFrontUrl:
    Description: "The CloudFront Distribution URL"
    Value: !GetAtt CloudFrontDistribution.DomainName
